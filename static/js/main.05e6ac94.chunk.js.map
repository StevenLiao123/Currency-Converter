{"version":3,"sources":["containers/QuoteForm/QuoteForm.js","containers/QuoteResult/QuoteResult.js","containers/App.js","serviceWorker.js","index.js"],"names":["QuoteForm","props","handleFromCurrencySelector","event","setState","fromCurrency","target","value","handleToCurrencySelector","toCurrency","handleInputChange","amount","getCurrencyData","preventDefault","state","isNaN","axios","get","then","res","rate","data","CustomerRate","result","CustomerAmount","history","push","pathname","catch","error","alert","currencies","this","className","style","borderBottom","onSubmit","color","type","placeholder","required","name","onChange","map","currency","key","width","Component","withRouter","QuoteResult","handleClickEvent","location","onClick","App","routes","path","exact","component","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.05e6ac94.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { withRouter } from 'react-router-dom';\r\nimport axios from 'axios';\r\n\r\nimport './QuoteForm.css';\r\n\r\nclass QuoteForm extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            currencies: ['AUD', 'EUR', 'GBP', 'JPY', 'USD','SGD', 'NZD', 'KRW', 'INR', 'IDR', 'CNY', 'CAD', 'EGP'],\r\n            fromCurrency: 'AUD',\r\n            rate: '',\r\n            amount: \"0.00\",\r\n            toCurrency: 'AUD',\r\n            result: ''\r\n        };\r\n    }\r\n\r\n    handleFromCurrencySelector = (event) => {\r\n        this.setState({\r\n            fromCurrency: event.target.value\r\n        });\r\n    }\r\n\r\n    handleToCurrencySelector = (event) => {\r\n        this.setState({\r\n            toCurrency: event.target.value\r\n        });\r\n    }\r\n\r\n    handleInputChange = (event) => {\r\n        this.setState({\r\n            amount: event.target.value\r\n        });\r\n    }\r\n\r\n    getCurrencyData = (event) => {\r\n        event.preventDefault();\r\n        const amount = this.state.amount;\r\n        const fromCurrency = this.state.fromCurrency;\r\n        const toCurrency = this.state.toCurrency;\r\n        if (amount === isNaN) {\r\n            return\r\n        } else {\r\n            axios.get(`https://api.ofx.com/PublicSite.ApiService/OFX/spotrate/Individual/${this.state.fromCurrency}/${this.state.toCurrency}/${this.state.amount}?format=json`)\r\n                .then(res => {\r\n                    const rate = res.data.CustomerRate\r\n                    const result = res.data.CustomerAmount\r\n                    this.setState({\r\n                        rate, result\r\n                    })\r\n                    this.props.history.push({ pathname: '/result', state: { rate, result, fromCurrency, toCurrency, amount } });\r\n                })\r\n                .catch(error => {\r\n                    alert(\"Please fill in all the required (*) information ^_^\");\r\n                });\r\n        }\r\n    };\r\n\r\n    render() {\r\n        const { currencies, fromCurrency, amount, toCurrency } = this.state\r\n        return (\r\n            <div className=\"container\">\r\n                <h1 className=\"header text-left pb-2\" style={{ borderBottom: `4px solid #92a8d1` }}>Quick Quote</h1>\r\n                <form className=\"form mt-3 text-left\" onSubmit={this.getCurrencyData}>\r\n                    <div className=\"form-row text-left\">\r\n                        <div className=\"form-group col-md-6\">\r\n                            <label>First Name  <span style={{ color: \"red\" }}>*</span></label>\r\n                            <input className=\"form-control\" type=\"text\" placeholder=\"First Name\" required/>\r\n                        </div>\r\n                        <div className=\"form-group col-md-6\">\r\n                            <label>Last Name  <span style={{ color: \"red\" }}>*</span></label>\r\n                            <input className=\"form-control\" type=\"text\" placeholder=\"Last Name\" required/>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <label>Email</label>\r\n                        <input className=\"form-control\" type=\"email\" placeholder=\"Email\" />\r\n                    </div>\r\n                    <span className=\"telephone mb-4\">Telephone / Mobile</span>\r\n                    <div className=\"form-row\">\r\n                        <div className=\"form-group col-md-2 pr-0\">\r\n                            <select className=\"form-control\">\r\n                                <option>+61</option>\r\n                                <option>+64</option>\r\n                                <option>+44</option>\r\n                                <option>+81</option>\r\n                            </select>\r\n                        </div>\r\n                        <div className=\"form-group col-md-10 pl-0\">\r\n                            <input className=\"form-control\" type=\"number\"  />\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"form-row\">\r\n                        <div className=\"form-group col-md-6\">\r\n                            <label >From Currency <span style={{ color: \"red\" }}>*</span></label>\r\n                            <select\r\n                                className=\"form-control\"\r\n                                name=\"fromCurrency\"\r\n                                value={fromCurrency}\r\n                                onChange={this.handleFromCurrencySelector}\r\n                                required\r\n                            >{currencies.map(currency => <option\r\n                                key={currency}\r\n                                value={currency}\r\n                            >{currency}\r\n                            </option>)}\r\n                            </select>\r\n                        </div>\r\n                        <div className=\"form-group col-md-6\">\r\n                            <label >To Currency <span style={{ color: \"red\" }}>*</span></label>\r\n                            <select\r\n                                className=\"form-control\"\r\n                                name=\"toCurrency\"\r\n                                value={toCurrency}\r\n                                onChange={this.handleToCurrencySelector}\r\n                                required\r\n                            >{currencies.map(currency => <option\r\n                                key={currency}\r\n                                value={currency}\r\n                            >{currency}\r\n                            </option>)}\r\n                            </select>\r\n                        </div>\r\n                        <div className=\"form-group col-md-6\">\r\n                            <label>Amount <span style={{ color: \"red\" }}>*</span></label>\r\n                            <input\r\n                                type=\"number\"\r\n                                value={amount}\r\n                                onChange={this.handleInputChange}\r\n                                className=\"form-control\"\r\n                                required/>\r\n                        </div>\r\n                    </div>\r\n                    <button className=\"btn btn-primary rounded-pill mt-3 px-5\" type=\"submit\" value=\"submit\" width=\"100px\">GET QUOTE</button>\r\n                </form>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport default withRouter(QuoteForm);","import React, { Component } from 'react';\r\nimport { withRouter } from 'react-router-dom';\r\n\r\nimport './QuoteResult.css';\r\n\r\nclass QuoteResult extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            result: this.props.location.state.result,\r\n            rate: this.props.location.state.rate,\r\n            fromCurrency: this.props.location.state.fromCurrency,\r\n            toCurrency: this.props.location.state.toCurrency\r\n        }\r\n    }\r\n\r\n    handleClickEvent = () => {\r\n        this.props.history.push('/');\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"container\">\r\n                <h1 className=\"header text-left pb-2\" style={{ borderBottom: `4px solid #92a8d1` }}>Quick Quote</h1>\r\n                <div className=\"quote-result mt-3\">\r\n                    <div className=\"content\">\r\n                        <h4>OFX Customer Rate</h4>\r\n                        <h1 className=\"currency-rate text-center mb-3\">{this.props.location.state.rate}</h1>\r\n                        <h4>From</h4>\r\n                        <h2 className=\"fromCurrency mb-3\">{this.props.location.state.fromCurrency} <span className=\"currency\">{this.props.location.state.amount}</span></h2>\r\n                        <h4>To</h4>\r\n                        <h2>{this.props.location.state.toCurrency} <span className=\"currency\">{this.props.location.state.result}</span></h2>\r\n                        <button className=\"btn btn-primary rounded-pill mt-5 px-4\" type=\"button\" onClick={this.handleClickEvent} width=\"100px\">START NEW QUOTE</button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default withRouter(QuoteResult);\r\n","import React, { Component } from 'react';\nimport { Route, Switch } from 'react-router-dom';\n\nimport './App.css';\nimport QuoteForm from './QuoteForm';\nimport QuoteResult from './QuoteResult';\n\nclass App extends Component {\n  render() {\n    let routes = (\n      <Switch>\n        <Route path=\"/\" exact component={QuoteForm} />\n        <Route path=\"/result\" component={QuoteResult} />\n      </Switch>\n    );\n\n    return (\n      <div className=\"App px-5\">\n          {routes}\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <BrowserRouter>\n        <App />\n    </BrowserRouter>\n,document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}